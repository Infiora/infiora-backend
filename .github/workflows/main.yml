name: Continuous Integration

on:
  push:
    branches:
      - main

concurrency:
  group: main
  cancel-in-progress: true

jobs:
  quality-assurance:
    name: Quality Assurance
    uses: ./.github/workflows/pr.yml

  deploy:
    name: Deploy
    needs: quality-assurance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: 22
          source: "."
          target: "/home/${{ secrets.EC2_USERNAME }}/infiora-backend"
          rm: true

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: 22
          script: |
            # Add user to docker group if not already added
            sudo usermod -aG docker ${{ secrets.EC2_USERNAME }}

            # Navigate to project directory
            cd /home/${{ secrets.EC2_USERNAME }}/infiora-backend

            # Generate a secure SECRET_KEY if not provided
            if [ -z "${{ secrets.SECRET_KEY }}" ]; then
              SECRET_KEY="django-$(openssl rand -hex 32)"
            else
              SECRET_KEY="${{ secrets.SECRET_KEY }}"
            fi

            # Create production environment file from GitHub secrets
            cat > .env << EOF
            # Django settings
            INFIORA_DEBUG=False
            INFIORA_SECRET_KEY=${SECRET_KEY}
            INFIORA_CSRF_TRUSTED_ORIGINS=${{ secrets.CSRF_TRUSTED_ORIGINS || '[http://localhost:8000,https://localhost:8000]' }}

            # Email settings (optional)
            INFIORA_EMAIL_HOST=${{ secrets.EMAIL_HOST || 'smtp.gmail.com' }}
            INFIORA_EMAIL_PORT=${{ secrets.EMAIL_PORT || '587' }}
            INFIORA_EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER || '' }}
            INFIORA_EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD || '' }}
            INFIORA_EMAIL_FROM=${{ secrets.EMAIL_FROM || '' }}

            # AWS S3 settings (optional)
            INFIORA_AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID || '' }}
            INFIORA_AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY || '' }}
            INFIORA_AWS_STORAGE_BUCKET_NAME=${{ secrets.AWS_STORAGE_BUCKET_NAME || '' }}

            # Client URL
            INFIORA_CLIENT_URL=${{ secrets.CLIENT_URL || 'http://localhost:3000' }}

            # Database settings (matches docker-compose.yml)
            INFIORA_DATABASES={"default":{"ENGINE":"django.db.backends.postgresql","NAME":"infiora","USER":"postgres","PASSWORD":"infiora","HOST":"db","PORT":"5432"}}
            EOF

            # Make sure the file is readable
            chmod 644 .env

            # Verify environment file was created
            echo "Environment file contents:"
            cat .env

            # Use newgrp to apply docker group for this session
            newgrp docker << 'DOCKER_COMMANDS'
            # Stop existing containers
            docker-compose down

            # Clean up unused Docker resources first
            docker system prune -f

            # Build and start containers with verbose output
            echo "Building and starting containers..."
            if ! docker-compose up --build -d; then
                echo "❌ Failed to start containers"
                echo "Container logs:"
                docker-compose logs
                exit 1
            fi

            # Check if containers are running
            echo "Container status:"
            docker-compose ps

            # Wait a moment for containers to fully start
            sleep 10

            # Check container logs
            echo "Container logs:"
            docker-compose logs --tail=50

            echo "Deployment completed successfully!"
            echo "Application is running on port 8000"
            DOCKER_COMMANDS

            # Wait for application to start up
            echo "Waiting for application to start..."
            sleep 30

            # Test application health
            echo "Testing application health..."

            # Check if Django can connect to database and is configured correctly
            if docker-compose exec -T app poetry run python -m core.manage check --database default; then
                echo "✅ Application health check passed!"

                # Get application status
                echo "Application status:"
                docker-compose exec -T app poetry run python -m core.manage check

                exit 0
            else
                echo "❌ Application health check failed!"

                # Show container logs for debugging
                echo "Container logs:"
                docker-compose logs --tail=50

                # Try to get health check response anyway
                echo "Attempting to get health check response:"
                curl -v http://localhost:8000/ || echo "Could not reach application"

                exit 1
            fi
