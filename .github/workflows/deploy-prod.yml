name: Deploy to EC2

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: 22
          source: "."
          target: "/home/${{ secrets.EC2_USERNAME }}/infiora-backend"
          rm: true

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: 22
          script: |
            # Add user to docker group if not already added
            sudo usermod -aG docker ${{ secrets.EC2_USERNAME }}

            # Navigate to project directory
            cd /home/${{ secrets.EC2_USERNAME }}/infiora-backend

            # Create production environment file from GitHub secrets
            cat > .env << 'EOF'
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            DEBUG=False
            ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}
            DB_ENGINE=django.db.backends.postgresql
            DB_NAME=infiora
            DB_USER=infiora
            DB_PASSWORD=infiora123
            DB_HOST=db
            DB_PORT=5432
            POSTGRES_DB=infiora
            POSTGRES_USER=infiora
            POSTGRES_PASSWORD=infiora123
            EOF

            # Make sure the file is readable
            chmod 644 .env

            # Verify environment file was created
            echo "Environment file contents:"
            cat .env

            # Use newgrp to apply docker group for this session
            newgrp docker << 'DOCKER_COMMANDS'
            # Stop existing containers
            docker-compose -f docker-compose.prod.yml down

            # Build and start containers
            docker-compose -f docker-compose.prod.yml up --build -d

            # Clean up unused Docker resources
            docker system prune -f

            # Check if containers are running
            docker-compose -f docker-compose.prod.yml ps

            echo "Deployment completed successfully!"
            echo "Application is running on port 8000"
            DOCKER_COMMANDS

            # Wait for application to start up
            echo "Waiting for application to start..."
            sleep 30

            # Test health check endpoint
            echo "Testing health check endpoint..."
            HEALTH_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/health/)

            if [ "$HEALTH_RESPONSE" = "200" ]; then
                echo "✅ Health check passed! Application is healthy."

                # Get detailed health check response
                echo "Health check response:"
                curl -s http://localhost:8000/health/ | python3 -m json.tool || echo "Could not parse JSON response"

                exit 0
            else
                echo "❌ Health check failed! HTTP status: $HEALTH_RESPONSE"

                # Show container logs for debugging
                echo "Container logs:"
                docker-compose -f docker-compose.prod.yml logs --tail=50

                # Try to get health check response anyway
                echo "Attempting to get health check response:"
                curl -v http://localhost:8000/health/ || echo "Could not reach health endpoint"

                exit 1
            fi
