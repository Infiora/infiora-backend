name: Deploy to EC2

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: 22
          source: "."
          target: "/home/${{ secrets.EC2_USERNAME }}/infiora-backend"
          rm: true

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: 22
          script: |
            # Navigate to project directory
            cd /home/${{ secrets.EC2_USERNAME }}/infiora-backend

            # Create production environment file from GitHub secrets
            cat > .env.prod << EOF
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            DEBUG=False
            ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}
            DB_ENGINE=django.db.backends.postgresql
            DB_NAME=infiora
            DB_USER=infiora
            DB_PASSWORD=infiora
            DB_HOST=db
            DB_PORT=5432
            EOF

            # Stop existing containers
            docker-compose -f docker-compose.prod.yml down

            # Build and start containers
            docker-compose -f docker-compose.prod.yml up --build -d

            # Clean up unused Docker resources
            docker system prune -f

            # Check if containers are running
            docker-compose -f docker-compose.prod.yml ps

            echo "Deployment completed successfully!"
            echo "Application is running on port 8000"
