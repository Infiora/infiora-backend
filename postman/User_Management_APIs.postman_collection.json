{
	"info": {
		"_postman_id": "12345678-1234-1234-1234-123456789abc",
		"name": "User Management APIs - Hierarchical Access",
		"description": "Comprehensive collection for testing the hierarchical user management system.\n\n**Access Levels:**\n- **Admin Users** (superuser + staff): Can manage ALL users\n- **Manager Users** (staff only): Can only manage users they created\n- **Regular Users**: No access to user management\n\n**Base URL:** `{{base_url}}/api/v1/users/`",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login Admin User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('admin_access_token', response.access);",
									"    pm.environment.set('admin_refresh_token', response.refresh);",
									"    console.log('Admin tokens saved to environment');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{admin_username}}\",\n    \"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Manager User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('manager_access_token', response.access);",
									"    pm.environment.set('manager_refresh_token', response.refresh);",
									"    console.log('Manager tokens saved to environment');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{manager_username}}\",\n    \"password\": \"{{manager_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Regular User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('regular_access_token', response.access);",
									"    pm.environment.set('regular_refresh_token', response.refresh);",
									"    console.log('Regular user tokens saved to environment');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{regular_username}}\",\n    \"password\": \"{{regular_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User CRUD Operations",
			"item": [
				{
					"name": "List Users (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has results array', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('results');",
									"    pm.expect(response.results).to.be.an('array');",
									"});",
									"",
									"pm.test('Admin can see all users', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.results.length).to.be.greaterThan(0);",
									"    console.log(`Admin sees ${response.results.length} users`);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/users/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "List Users (Manager)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Manager sees only created users', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('results');",
									"    pm.expect(response.results).to.be.an('array');",
									"    ",
									"    // Manager should only see users they created",
									"    response.results.forEach(user => {",
									"        pm.expect(user.created_by_username).to.eql(pm.environment.get('manager_username'));",
									"    });",
									"    ",
									"    console.log(`Manager sees ${response.results.length} users`);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{manager_access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/users/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "List Users (Regular User - Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403 Forbidden', function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test('Regular user cannot access user list', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('detail');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{regular_access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/users/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201 Created', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('User created successfully', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response.username).to.eql('admin_created_user');",
									"    pm.expect(response.email).to.eql('admin_created@example.com');",
									"    pm.expect(response.created_by).to.not.be.null;",
									"    ",
									"    // Save user ID for further tests",
									"    pm.environment.set('admin_created_user_id', response.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin_created_user\",\n    \"email\": \"admin_created@example.com\",\n    \"password\": \"AdminCreated123!\",\n    \"first_name\": \"Admin\",\n    \"last_name\": \"Created\",\n    \"is_active\": true,\n    \"is_staff\": false,\n    \"is_superuser\": false,\n    \"is_email_verified\": false\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/users/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User (Manager)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201 Created', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('User created by manager', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response.username).to.eql('manager_created_user');",
									"    pm.expect(response.created_by).to.not.be.null;",
									"    ",
									"    // Save user ID for further tests",
									"    pm.environment.set('manager_created_user_id', response.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{manager_access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"manager_created_user\",\n    \"email\": \"manager_created@example.com\",\n    \"password\": \"ManagerCreated123!\",\n    \"first_name\": \"Manager\",\n    \"last_name\": \"Created\",\n    \"is_active\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/users/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Details (Admin can see any)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('User details returned', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('username');",
									"    pm.expect(response).to.have.property('email');",
									"    pm.expect(response).to.have.property('created_by');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/users/{{manager_created_user_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{manager_created_user_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Details (Manager - Own Created)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Manager can see own created user', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response.username).to.eql('manager_created_user');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{manager_access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/users/{{manager_created_user_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{manager_created_user_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Details (Manager - Not Own - Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 404 Not Found', function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test('Manager cannot see user they did not create', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('detail');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{manager_access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/users/{{admin_created_user_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{admin_created_user_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('User updated successfully', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.first_name).to.eql('Updated');",
									"    pm.expect(response.last_name).to.eql('ByAdmin');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\": \"Updated\",\n    \"last_name\": \"ByAdmin\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/users/{{admin_created_user_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{admin_created_user_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 204 No Content', function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test('User deleted successfully', function () {",
									"    pm.expect(pm.response.text()).to.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/users/{{admin_created_user_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{admin_created_user_id}}",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Actions",
			"item": [
				{
					"name": "Activate User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('User activated successfully', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.is_active).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/users/{{manager_created_user_id}}/activate/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{manager_created_user_id}}",
								"activate",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Deactivate User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('User deactivated successfully', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.is_active).to.be.false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/users/{{manager_created_user_id}}/deactivate/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{manager_created_user_id}}",
								"deactivate",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Make Staff",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('User granted staff privileges', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.is_staff).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/users/{{manager_created_user_id}}/make_staff/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{manager_created_user_id}}",
								"make_staff",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Staff",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Staff privileges removed', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.is_staff).to.be.false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/users/{{manager_created_user_id}}/remove_staff/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{manager_created_user_id}}",
								"remove_staff",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Password reset successfully', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('new_password');",
									"    pm.expect(response).to.have.property('detail');",
									"    pm.expect(response).to.have.property('message');",
									"    pm.expect(response.new_password).to.have.lengthOf(12);",
									"    ",
									"    console.log('New password:', response.new_password);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/users/{{manager_created_user_id}}/reset_password/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{manager_created_user_id}}",
								"reset_password",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Filtering and Search",
			"item": [
				{
					"name": "Filter by Active Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Only active users returned', function () {",
									"    const response = pm.response.json();",
									"    response.results.forEach(user => {",
									"        pm.expect(user.is_active).to.be.true;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/users/?is_active=true",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								""
							],
							"query": [
								{
									"key": "is_active",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter by Staff Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Only staff users returned', function () {",
									"    const response = pm.response.json();",
									"    response.results.forEach(user => {",
									"        pm.expect(user.is_staff).to.be.true;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/users/?is_staff=true",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								""
							],
							"query": [
								{
									"key": "is_staff",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search by Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Search results contain keyword', function () {",
									"    const response = pm.response.json();",
									"    response.results.forEach(user => {",
									"        const searchTerm = 'admin';",
									"        const found = user.username.toLowerCase().includes(searchTerm) ||",
									"                     user.email.toLowerCase().includes(searchTerm) ||",
									"                     (user.first_name && user.first_name.toLowerCase().includes(searchTerm)) ||",
									"                     (user.last_name && user.last_name.toLowerCase().includes(searchTerm));",
									"        pm.expect(found).to.be.true;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/users/?search=admin",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								""
							],
							"query": [
								{
									"key": "search",
									"value": "admin"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Order by Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Results ordered by username', function () {",
									"    const response = pm.response.json();",
									"    if (response.results.length > 1) {",
									"        const usernames = response.results.map(user => user.username);",
									"        const sortedUsernames = [...usernames].sort();",
									"        pm.expect(usernames).to.deep.equal(sortedUsernames);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/users/?ordering=username",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								""
							],
							"query": [
								{
									"key": "ordering",
									"value": "username"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Self-Protection Tests",
			"item": [
				{
					"name": "Admin Cannot Delete Own Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400 Bad Request', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Cannot delete own account error', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.detail).to.include('Cannot delete your own account');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/users/{{admin_user_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{admin_user_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin Cannot Remove Own Staff Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400 Bad Request', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Cannot remove own staff status error', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.detail).to.include('Cannot remove staff status from your own account');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/users/{{admin_user_id}}/remove_staff/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{admin_user_id}}",
								"remove_staff",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin Cannot Deactivate Own Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400 Bad Request', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Cannot deactivate own account error', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.detail).to.include('Cannot deactivate your own account');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/users/{{admin_user_id}}/deactivate/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{admin_user_id}}",
								"deactivate",
								""
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string"
		},
		{
			"key": "admin_username",
			"value": "admin",
			"type": "string"
		},
		{
			"key": "admin_password",
			"value": "admin123",
			"type": "string"
		},
		{
			"key": "manager_username",
			"value": "manager",
			"type": "string"
		},
		{
			"key": "manager_password",
			"value": "manager123",
			"type": "string"
		},
		{
			"key": "regular_username",
			"value": "regular",
			"type": "string"
		},
		{
			"key": "regular_password",
			"value": "regular123",
			"type": "string"
		},
		{
			"key": "admin_user_id",
			"value": "1",
			"type": "string"
		}
	]
}